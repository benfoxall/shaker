// SHAKER.IO INSTRUMENTED VERSION

<% include lib/jquery-1.10.1.min.js %>

(function(origin, frame_src){

	// set up the transport.

	var domready = <% include lib/domready.js %>;

	var ifr = document.createElement('iframe');
	ifr.setAttribute('style', 'display:none');
	ifr.setAttribute('src', frame_src);

	domready(function(){
		document.body.appendChild(ifr);	
	});

	var transport_active = false;
	var transport_pending = [];

	window.addEventListener('message', function(e){
		if(e.origin === origin){
			console.log("yes, from the iframe")
			transport_active = true;
			transport_pending.forEach(emit);
			transport_pending = [];
		}
	}, false);


	// send the message to the parent window
	function emit(message){
		if(transport_active){
			ifr.contentWindow.postMessage(message,origin);
		} else{
			// queue up the messges
			transport_pending.push(message);
		}
	}


	// Core things

	function feature(name, configFn){
		// register the feature
		emit(name);

		configFn(function(){
			emit(name + '=true');
		});
	}

	// spy on an objects function, when called call back, 
	// through and replace with original
	function spy(obj, fn, callback){
		var original = obj[fn];
		obj[fn] = function(){
			callback();
			obj[fn] = original;
			return original.apply(this,arguments);
		}
	}


	// The actual checks!

	feature('modules.ajax', function(used){
		spy($,'ajax', used);
		spy($.fn,'load', used);
	});

	feature('modules.css', function(used){
		spy($.fn,'css', used);
	});

	feature('modules.dimensions', function(used){
		spy($.fn,'width', used);
		spy($.fn,'height', used);
	});

	feature('modules.effects', function(used){
		spy($.fn,'animate', used);
		spy($.fn,'fadeTo', used);
		spy($.fn,'stop', used);
	});

	feature('modules.offset', function(used){
		spy($.fn,'offset', used);
		spy($.fn,'position', used);
		spy($.fn,'offsetParent', used);
	});


	// Third party plugins - bit sketchy at the moment

	var fns = Object.keys($.fn),
		intercept_upto = fns.length;

	window.skr_intercept = function(){

		// intercept any extra plugins that have been added
		fns = Object.keys($.fn);
		fns.slice(intercept_upto).forEach(function(k){
			feature('plugins.' + k, function(used){
				spy($.fn,k, used);
			});
		});

		intercept_upto = fns.length;

	}



})("<%= origin %>","<%= frame_src %>");